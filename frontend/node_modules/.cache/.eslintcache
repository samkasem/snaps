[{"D:\\Projects\\snaps\\frontend\\src\\index.js":"1","D:\\Projects\\snaps\\frontend\\src\\App.js":"2","D:\\Projects\\snaps\\frontend\\src\\container\\Home.jsx":"3","D:\\Projects\\snaps\\frontend\\src\\components\\Login.jsx":"4","D:\\Projects\\snaps\\frontend\\src\\client.js":"5","D:\\Projects\\snaps\\frontend\\src\\components\\UserProfile.jsx":"6","D:\\Projects\\snaps\\frontend\\src\\components\\Sidebar.jsx":"7","D:\\Projects\\snaps\\frontend\\src\\components\\index.js":"8","D:\\Projects\\snaps\\frontend\\src\\container\\Snaps.jsx":"9","D:\\Projects\\snaps\\frontend\\src\\utils\\data.js":"10","D:\\Projects\\snaps\\frontend\\src\\components\\CreateSnap.jsx":"11","D:\\Projects\\snaps\\frontend\\src\\components\\Navbar.jsx":"12","D:\\Projects\\snaps\\frontend\\src\\components\\SnapDetail.jsx":"13","D:\\Projects\\snaps\\frontend\\src\\components\\Search.jsx":"14","D:\\Projects\\snaps\\frontend\\src\\components\\Feed.jsx":"15","D:\\Projects\\snaps\\frontend\\src\\components\\MasonryLayout.jsx":"16","D:\\Projects\\snaps\\frontend\\src\\components\\Spinner.jsx":"17","D:\\Projects\\snaps\\frontend\\src\\components\\Snap.jsx":"18","D:\\Projects\\snaps\\frontend\\src\\utils\\fetchUser.js":"19"},{"size":301,"mtime":1660765332197,"results":"20","hashOfConfig":"21"},{"size":560,"mtime":1660922816712,"results":"22","hashOfConfig":"21"},{"size":2613,"mtime":1660842363171,"results":"23","hashOfConfig":"21"},{"size":2420,"mtime":1660765440354,"results":"24","hashOfConfig":"21"},{"size":445,"mtime":1660760226882,"results":"25","hashOfConfig":"21"},{"size":4397,"mtime":1660917354743,"results":"26","hashOfConfig":"21"},{"size":2616,"mtime":1660922198890,"results":"27","hashOfConfig":"21"},{"size":390,"mtime":1660834762194,"results":"28","hashOfConfig":"21"},{"size":1165,"mtime":1660845533532,"results":"29","hashOfConfig":"21"},{"size":4613,"mtime":1660921194693,"results":"30","hashOfConfig":"21"},{"size":7307,"mtime":1660918209499,"results":"31","hashOfConfig":"21"},{"size":1347,"mtime":1660837881836,"results":"32","hashOfConfig":"21"},{"size":6059,"mtime":1660918122960,"results":"33","hashOfConfig":"21"},{"size":1086,"mtime":1660919888661,"results":"34","hashOfConfig":"21"},{"size":1060,"mtime":1660839393582,"results":"35","hashOfConfig":"21"},{"size":496,"mtime":1660840674174,"results":"36","hashOfConfig":"21"},{"size":452,"mtime":1660840237644,"results":"37","hashOfConfig":"21"},{"size":4763,"mtime":1660916638791,"results":"38","hashOfConfig":"21"},{"size":206,"mtime":1660842334525,"results":"39","hashOfConfig":"21"},{"filePath":"40","messages":"41","suppressedMessages":"42","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},"hu4uba",{"filePath":"44","messages":"45","suppressedMessages":"46","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"47"},{"filePath":"48","messages":"49","suppressedMessages":"50","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51"},{"filePath":"52","messages":"53","suppressedMessages":"54","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"55","messages":"56","suppressedMessages":"57","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"43"},{"filePath":"58","messages":"59","suppressedMessages":"60","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"61","messages":"62","suppressedMessages":"63","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"64"},{"filePath":"65","messages":"66","suppressedMessages":"67","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"68","messages":"69","suppressedMessages":"70","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"71","messages":"72","suppressedMessages":"73","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"74","messages":"75","suppressedMessages":"76","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"77","messages":"78","suppressedMessages":"79","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"80","messages":"81","suppressedMessages":"82","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"83"},{"filePath":"84","messages":"85","suppressedMessages":"86","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","suppressedMessages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","suppressedMessages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"93","messages":"94","suppressedMessages":"95","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","suppressedMessages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"99"},{"filePath":"100","messages":"101","suppressedMessages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Projects\\snaps\\frontend\\src\\index.js",[],[],[],"D:\\Projects\\snaps\\frontend\\src\\App.js",["103"],[],"import React, { useEffect } from 'react'\r\nimport { Routes, Route, useNavigate } from 'react-router-dom'\r\nimport Login from './components/Login'\r\nimport Home from './container/Home'\r\nimport { fetchUser } from '../src/utils/fetchUser'\r\n\r\nconst App = () => {\r\n  const navigate = useNavigate()\r\n\r\n  useEffect(() => {\r\n    const User = fetchUser()\r\n\r\n    if (!User) navigate('/login')\r\n  }, [])\r\n\r\n  return (\r\n    <Routes>\r\n      <Route path='login' element={<Login />} />\r\n      <Route path='/*' element={<Home />} />\r\n    </Routes>\r\n  )\r\n}\r\n\r\nexport default App\r\n","D:\\Projects\\snaps\\frontend\\src\\container\\Home.jsx",["104"],[],"import React, { useState, useRef, useEffect } from 'react'\r\nimport { HiMenu } from 'react-icons/hi'\r\nimport { AiFillCloseCircle } from 'react-icons/ai'\r\nimport { Link, Route, Routes } from 'react-router-dom'\r\nimport { Sidebar, UserProfile } from '../components'\r\nimport { client } from '../client'\r\nimport logo from '../assets/logo.png'\r\nimport Snaps from './Snaps'\r\nimport { userQuery } from '../utils/data'\r\nimport { fetchUser } from '../utils/fetchUser'\r\n\r\nconst Home = () => {\r\n  const [toggleSidebar, setToggleSidebar] = useState(false)\r\n  const [user, setUser] = useState(null)\r\n  const scrollRef = useRef(null)\r\n\r\n  const userInfo = fetchUser()\r\n\r\n  useEffect(() => {\r\n    const query = userQuery(userInfo?.googleId)\r\n    client.fetch(query).then((data) => {\r\n      setUser(data[0])\r\n    })\r\n  }, [])\r\n  useEffect(() => {\r\n    scrollRef.current.scrollTo(0, 0)\r\n  }, [])\r\n\r\n  return (\r\n    <div className='flex bg-gray-50 md:flex-row flex-col h-screen transaction-height duration-75 ease-out'>\r\n      <div className='hidden md:flex h-screen flex-initial'>\r\n        <Sidebar user={user && user} />\r\n      </div>\r\n      <div className='flex md:hidden flex-row'>\r\n        <div className='p-2 w-full flex flex-row justify-between items-center shadow-md'>\r\n          <HiMenu\r\n            fontSize={40}\r\n            className='cursor-pointer'\r\n            onClick={() => setToggleSidebar(true)}\r\n          />\r\n          <Link to='/'>\r\n            <img src={logo} alt='logo' className='w-28' />\r\n          </Link>\r\n          <Link to={`user-profile/${user?._id}`}>\r\n            <img\r\n              src={`${user?.image}`}\r\n              alt='user-pic'\r\n              className='\"w-9 h-9 rounded-full'\r\n            />\r\n          </Link>\r\n        </div>\r\n        {toggleSidebar && (\r\n          <div className='fixed w-4/5 bg-white h-screen overflow-y-auto shadow-md z-10 animate-slide-in'>\r\n            <div className='absolute w-full flex justify-end items-center p-2'>\r\n              <AiFillCloseCircle\r\n                fontSize={30}\r\n                className='cursor-pointer'\r\n                onClick={() => setToggleSidebar(false)}\r\n              />\r\n            </div>\r\n            <Sidebar user={user && user} closeToggle={setToggleSidebar} />\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className='pb-2 flex-1 h-screen overflow-y-scroll' ref={scrollRef}>\r\n        <Routes>\r\n          <Route path='/user-profile/:userId' element={<UserProfile />} />\r\n          <Route path='/*' element={<Snaps user={user && user} />} />\r\n        </Routes>\r\n      </div>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Home\r\n","D:\\Projects\\snaps\\frontend\\src\\components\\Login.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\client.js",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\UserProfile.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\Sidebar.jsx",["105"],[],"import React from 'react'\r\nimport { NavLink, Link } from 'react-router-dom'\r\nimport { RiHomeFill } from 'react-icons/ri'\r\nimport { IoIosArrowForward } from 'react-icons/io'\r\nimport { categories } from '../utils/data'\r\nimport logo from '../assets/logo.png'\r\n\r\nconst isNotActiveStyle =\r\n  'flex items-center px-5 gap-3 text-gray-500 hover:text-black transition-all duration-200 ease-in-out capitalize'\r\nconst isActiveStyle =\r\n  'flex items-center px-5 gap-3 font-extrabold border-r-2 border-black  transition-all duration-200 ease-in-out capitalize'\r\n\r\nconst Sidebar = ({ user, closeToggle }) => {\r\n  const handleCloseSidebar = () => {\r\n    if (closeToggle) closeToggle(false)\r\n  }\r\n  return (\r\n    <div className='flex flex-col justify-between bg-white h-full overflow-y-scroll min-w-210 hide-scrollbar'>\r\n      <div className='flex flex-col'>\r\n        <Link\r\n          to='/'\r\n          className='flex px-5 gap-2 my-6 pt-1 w-190 items-center'\r\n          onClick={handleCloseSidebar}\r\n        >\r\n          <img src={logo} alt='logo' className='w-full' />\r\n        </Link>\r\n        <div className='flex flex-col gap-5'>\r\n          <NavLink\r\n            to='/'\r\n            className={({ isActive }) =>\r\n              isActive ? isActiveStyle : isNotActiveStyle\r\n            }\r\n            onClick={handleCloseSidebar}\r\n          >\r\n            <RiHomeFill />\r\n            Home\r\n          </NavLink>\r\n          <h3 className='mt-2 px-5 text-base 2xl:text-xl font-bold'>\r\n            Discover Categories\r\n          </h3>\r\n          {categories.slice(0, categories.length - 1).map((category) => (\r\n            <NavLink\r\n              to={`/category/${category.name}`}\r\n              className={({ isActive }) =>\r\n                isActive ? isActiveStyle : isNotActiveStyle\r\n              }\r\n              onClick={handleCloseSidebar}\r\n              key={category.name}\r\n            >\r\n              <img\r\n                src={category.image}\r\n                className='w-8 h-8 rounded-full shadow-sm'\r\n              />\r\n              {category.name}\r\n            </NavLink>\r\n          ))}\r\n        </div>\r\n      </div>\r\n      {user && (\r\n        <Link\r\n          to={`user-profile/${user._id}`}\r\n          className='flex my-5 mb-3 gap-2 p-2 items-center bg-white rounded-lg shadow-lg mx-3'\r\n          onClick={handleCloseSidebar}\r\n        >\r\n          <img\r\n            src={user.image}\r\n            className='w-10 h-10 rounded-full'\r\n            alt='user-pic'\r\n          />\r\n          <p>{user.userName}</p>\r\n          <IoIosArrowForward />\r\n        </Link>\r\n      )}\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Sidebar\r\n","D:\\Projects\\snaps\\frontend\\src\\components\\index.js",[],[],"D:\\Projects\\snaps\\frontend\\src\\container\\Snaps.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\utils\\data.js",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\CreateSnap.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\Navbar.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\SnapDetail.jsx",["106"],[],"import React, { useEffect, useState } from 'react'\r\nimport { MdDownloadForOffline } from 'react-icons/md'\r\nimport { AiOutlineSend } from 'react-icons/ai'\r\nimport { FaExternalLinkAlt } from 'react-icons/fa'\r\nimport { Link, useParams } from 'react-router-dom'\r\nimport { v4 as uuidv4 } from 'uuid'\r\n\r\nimport { client, urlfor } from '../client'\r\nimport MasonryLayout from './MasonryLayout'\r\nimport { snapDetailMoreSnapQuery, snapDetailQuery } from '../utils/data'\r\nimport Spinner from './Spinner'\r\n\r\nconst SnapDetail = ({ user }) => {\r\n  const { snapId } = useParams()\r\n  const [snaps, setSnaps] = useState()\r\n  const [snapDetail, setSnapDetail] = useState()\r\n  const [comment, setComment] = useState('')\r\n  const [addingComment, setAddingComment] = useState(false)\r\n\r\n  const fetchSnapDetails = () => {\r\n    const query = snapDetailQuery(snapId)\r\n\r\n    if (query) {\r\n      client.fetch(`${query}`).then((data) => {\r\n        setSnapDetail(data[0])\r\n        console.log(data)\r\n        if (data[0]) {\r\n          const query1 = snapDetailMoreSnapQuery(data[0])\r\n          client.fetch(query1).then((res) => {\r\n            setSnaps(res)\r\n          })\r\n        }\r\n      })\r\n    }\r\n  }\r\n\r\n  useEffect(() => {\r\n    fetchSnapDetails()\r\n  }, [snapId])\r\n\r\n  const addComment = () => {\r\n    if (comment) {\r\n      setAddingComment(true)\r\n\r\n      client\r\n        .patch(snapId)\r\n        .setIfMissing({ comments: [] })\r\n        .insert('after', 'comments[-1]', [\r\n          {\r\n            comment,\r\n            _key: uuidv4(),\r\n            postedBy: { _type: 'postedBy', _ref: user._id },\r\n          },\r\n        ])\r\n        .commit()\r\n        .then(() => {\r\n          fetchSnapDetails()\r\n          setComment('')\r\n          setAddingComment(false)\r\n        })\r\n    }\r\n  }\r\n\r\n  if (!snapDetail) {\r\n    return <Spinner message='Showing snap' />\r\n  }\r\n\r\n  return (\r\n    <>\r\n      {snapDetail && (\r\n        <div\r\n          className='flex xl:flex-row flex-col m-auto bg-white'\r\n          style={{ maxWidth: '1500px', borderRadius: '32px' }}\r\n        >\r\n          <div className='flex justify-center items-center md:items-start flex-initial'>\r\n            <img\r\n              className='rounded-t-3xl rounded-b-lg'\r\n              src={snapDetail?.image && urlfor(snapDetail?.image).url()}\r\n              alt='user-post'\r\n            />\r\n          </div>\r\n          <div className='w-full p-5 flex-1 xl:min-w-620'>\r\n            <div className='flex items-center justify-between'>\r\n              <div className='flex gap-2 items-center'>\r\n                <a\r\n                  href={`${snapDetail.image.asset.url}?dl=`}\r\n                  download\r\n                  className='bg-secondaryColor p-2 text-xl rounded-full flex items-center justify-center text-dark opacity-75 hover:opacity-100'\r\n                >\r\n                  <MdDownloadForOffline />\r\n                </a>\r\n              </div>\r\n              <a\r\n                className='bg-secondaryColor p-2 text-md rounded-full flex items-center justify-center text-dark opacity-75 hover:opacity-100'\r\n                href={snapDetail.destination}\r\n                target='_blank'\r\n                rel='noreferrer'\r\n              >\r\n                <FaExternalLinkAlt />\r\n              </a>\r\n            </div>\r\n            <div>\r\n              <h1 className='text-4xl font-bold break-words mt-3'>\r\n                {snapDetail.title}\r\n              </h1>\r\n              <p className='mt-3'>{snapDetail.about}</p>\r\n            </div>\r\n            <Link\r\n              to={`/user-profile/${snapDetail?.postedBy._id}`}\r\n              className='flex gap-2 mt-5 items-center bg-white rounded-lg '\r\n            >\r\n              <img\r\n                src={snapDetail?.postedBy.image}\r\n                className='w-10 h-10 rounded-full'\r\n                alt='user-profile'\r\n              />\r\n              <p className='font-bold'>{snapDetail?.postedBy.userName}</p>\r\n            </Link>\r\n            <h2 className='mt-5 text-2xl'>Comments</h2>\r\n            <div className='max-h-370 overflow-y-auto'>\r\n              {snapDetail?.comments?.map((item) => (\r\n                <div\r\n                  className='flex gap-2 mt-5 items-center bg-white rounded-lg'\r\n                  key={item.comment}\r\n                >\r\n                  <img\r\n                    src={item.postedBy?.image}\r\n                    className='w-10 h-10 rounded-full cursor-pointer'\r\n                    alt='user-profile'\r\n                  />\r\n                  <div className='flex flex-col'>\r\n                    <p className='font-bold'>{item.postedBy?.userName}</p>\r\n                    <p>{item.comment}</p>\r\n                  </div>\r\n                </div>\r\n              ))}\r\n            </div>\r\n            <div className='flex flex-wrap mt-6 gap-3'>\r\n              <Link to={`/user-profile/${user._id}`}>\r\n                <img\r\n                  src={user.image}\r\n                  className='w-10 h-10 rounded-full cursor-pointer'\r\n                  alt='user-profile'\r\n                />\r\n              </Link>\r\n              <input\r\n                className=' flex-1 border-gray-100 outline-none border-2 p-2 rounded-2xl focus:border-gray-300'\r\n                type='text'\r\n                placeholder='Add a comment'\r\n                value={comment}\r\n                onChange={(e) => setComment(e.target.value)}\r\n              />\r\n              <button\r\n                type='button'\r\n                className='bg-yellow-500 text-white rounded-full px-6 py-2 font-semibold text-base outline-none'\r\n                onClick={addComment}\r\n              >\r\n                {addingComment ? 'Adding...' : <AiOutlineSend />}\r\n              </button>\r\n            </div>\r\n          </div>\r\n        </div>\r\n      )}\r\n      {snaps?.length > 0 && (\r\n        <h2 className='text-center font-bold text-2xl mt-8 mb-4'>\r\n          More like this\r\n        </h2>\r\n      )}\r\n      {snaps ? (\r\n        <MasonryLayout snaps={snaps} />\r\n      ) : (\r\n        <Spinner message='Loading more snaps' />\r\n      )}\r\n    </>\r\n  )\r\n}\r\n\r\nexport default SnapDetail\r\n","D:\\Projects\\snaps\\frontend\\src\\components\\Search.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\Feed.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\MasonryLayout.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\Spinner.jsx",[],[],"D:\\Projects\\snaps\\frontend\\src\\components\\Snap.jsx",["107","108"],[],"import React, { useState } from 'react'\r\nimport { Link, useNavigate } from 'react-router-dom'\r\nimport { v4 as uuidv4 } from 'uuid'\r\nimport { MdDownloadForOffline } from 'react-icons/md'\r\nimport { AiTwotoneDelete } from 'react-icons/ai'\r\nimport { BsFillArrowUpRightCircleFill } from 'react-icons/bs'\r\n\r\nimport { client, urlfor } from '../client'\r\nimport { fetchUser } from '../utils/fetchUser'\r\n\r\nconst Snap = ({ snap }) => {\r\n  const [postHovered, setPostHovered] = useState(false)\r\n  const [savingPost, setSavingPost] = useState(false)\r\n\r\n  const navigate = useNavigate()\r\n\r\n  const { postedBy, image, _id, destination } = snap\r\n\r\n  const user = fetchUser()\r\n\r\n  const deletSnap = (id) => {\r\n    client.delete(id).then(() => {\r\n      window.location.reload()\r\n    })\r\n  }\r\n\r\n  let alreadySaved = snap?.save?.filter(\r\n    (item) => item?.postedBy?._id === user?.googleId\r\n  )\r\n\r\n  alreadySaved = alreadySaved?.length > 0 ? alreadySaved : []\r\n\r\n  const saveSnap = (id) => {\r\n    if (alreadySaved?.length === 0) {\r\n      setSavingPost(true)\r\n\r\n      client\r\n        .patch(id)\r\n        .setIfMissing({ save: [] })\r\n        .insert('after', 'save[-1]', [\r\n          {\r\n            _key: uuidv4(),\r\n            userId: user?.googleId,\r\n            postedBy: {\r\n              _type: 'postedBy',\r\n              _ref: user?.googleId,\r\n            },\r\n          },\r\n        ])\r\n        .commit()\r\n        .then(() => {\r\n          window.location.reload()\r\n          setSavingPost(false)\r\n        })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className='m-2'>\r\n      <div\r\n        onMouseEnter={() => setPostHovered(true)}\r\n        onMouseLeave={() => setPostHovered(false)}\r\n        onClick={() => navigate(`snap-detail/${_id}`)}\r\n        className=' relative cursor-zoom-in w-auto hover:shadow-lg rounded-lg overflow-hidden transition-all duration-500 ease-in-out'\r\n      >\r\n        {image && (\r\n          <img\r\n            className='rounded-lg w-full '\r\n            src={urlfor(image).width(250).url()}\r\n            alt='user-post'\r\n          />\r\n        )}\r\n        {postHovered && (\r\n          <div\r\n            className='absolute top-0 w-full h-full flex flex-col justify-between p-1 pr-2 pt-2 pb-2 z-50'\r\n            style={{ height: '100%' }}\r\n          >\r\n            <div className='flex items-center justify-between'>\r\n              <div className='flex gap-2'>\r\n                <a\r\n                  href={`${image?.asset?.url}?dl=`}\r\n                  download\r\n                  onClick={(e) => {\r\n                    e.stopPropagation()\r\n                  }}\r\n                  className='bg-white w-9 h-9 p-2 rounded-full flex items-center justify-center text-dark text-xl opacity-75 hover:opacity-100 hover:shadow-md outline-none'\r\n                >\r\n                  <MdDownloadForOffline />\r\n                </a>\r\n              </div>\r\n              {alreadySaved?.length !== 0 ? (\r\n                <button\r\n                  type='button'\r\n                  className='bg-yellow-500 opacity-70 hover:opacity-100 text-white font-bold px-5 py-1 text-base rounded-3xl hover:shadow-md outline-none'\r\n                >\r\n                  {snap?.save?.length} Saved\r\n                </button>\r\n              ) : (\r\n                <button\r\n                  onClick={(e) => {\r\n                    e.stopPropagation()\r\n                    saveSnap(_id)\r\n                  }}\r\n                  type='button'\r\n                  className='bg-yellow-500 opacity-70 hover:opacity-100 text-white font-bold px-5 py-1 text-base rounded-3xl hover:shadow-md outline-none'\r\n                >\r\n                  {snap?.save?.length} {savingPost ? 'Saving' : 'Save'}\r\n                </button>\r\n              )}\r\n            </div>\r\n            <div className=' flex justify-between items-center gap-2 w-full'>\r\n              {postedBy?._id === user?.googleId && (\r\n                <button\r\n                  type='button'\r\n                  onClick={(e) => {\r\n                    e.stopPropagation()\r\n                    deletSnap(_id)\r\n                  }}\r\n                  className='bg-white p-2 rounded-full w-8 h-8 flex items-center justify-center text-dark opacity-75 hover:opacity-100 outline-none'\r\n                >\r\n                  <AiTwotoneDelete />\r\n                </button>\r\n              )}\r\n            </div>\r\n          </div>\r\n        )}\r\n      </div>\r\n      <Link\r\n        to={`/user-profile/${postedBy?._id}`}\r\n        className='flex gap-2 mt-2 items-center'\r\n      >\r\n        <img\r\n          className='w-8 h-8 rounded-full object-cover'\r\n          src={postedBy?.image}\r\n          alt='user-profile'\r\n        />\r\n        <p className='font-semibold capitalize'>{postedBy?.userName}</p>\r\n      </Link>\r\n    </div>\r\n  )\r\n}\r\n\r\nexport default Snap\r\n","D:\\Projects\\snaps\\frontend\\src\\utils\\fetchUser.js",[],[],{"ruleId":"109","severity":1,"message":"110","line":14,"column":6,"nodeType":"111","endLine":14,"endColumn":8,"suggestions":"112"},{"ruleId":"109","severity":1,"message":"113","line":24,"column":6,"nodeType":"111","endLine":24,"endColumn":8,"suggestions":"114"},{"ruleId":"115","severity":1,"message":"116","line":50,"column":15,"nodeType":"117","endLine":53,"endColumn":17},{"ruleId":"109","severity":1,"message":"118","line":39,"column":6,"nodeType":"111","endLine":39,"endColumn":14,"suggestions":"119"},{"ruleId":"120","severity":1,"message":"121","line":6,"column":10,"nodeType":"122","messageId":"123","endLine":6,"endColumn":38},{"ruleId":"120","severity":1,"message":"124","line":17,"column":33,"nodeType":"122","messageId":"123","endLine":17,"endColumn":44},"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'navigate'. Either include it or remove the dependency array.","ArrayExpression",["125"],"React Hook useEffect has a missing dependency: 'userInfo?.googleId'. Either include it or remove the dependency array.",["126"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has a missing dependency: 'fetchSnapDetails'. Either include it or remove the dependency array.",["127"],"no-unused-vars","'BsFillArrowUpRightCircleFill' is defined but never used.","Identifier","unusedVar","'destination' is assigned a value but never used.",{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},"Update the dependencies array to be: [navigate]",{"range":"134","text":"135"},"Update the dependencies array to be: [userInfo?.googleId]",{"range":"136","text":"137"},"Update the dependencies array to be: [fetchSnapDetails, snapId]",{"range":"138","text":"139"},[386,388],"[navigate]",[804,806],"[userInfo?.googleId]",[1229,1237],"[fetchSnapDetails, snapId]"]